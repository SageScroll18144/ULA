// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "01/27/2023 10:33:35"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module xor_bitbit (
	Ans_Xor,
	B,
	A);
output 	[4:0] Ans_Xor;
input 	[4:0] B;
input 	[4:0] A;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Ans_Xor[4]~output_o ;
wire \Ans_Xor[3]~output_o ;
wire \Ans_Xor[2]~output_o ;
wire \Ans_Xor[1]~output_o ;
wire \Ans_Xor[0]~output_o ;
wire \B[4]~input_o ;
wire \A[4]~input_o ;
wire \inst6~combout ;
wire \B[3]~input_o ;
wire \A[3]~input_o ;
wire \inst5~combout ;
wire \B[2]~input_o ;
wire \A[2]~input_o ;
wire \inst4~combout ;
wire \B[1]~input_o ;
wire \A[1]~input_o ;
wire \inst3~combout ;
wire \B[0]~input_o ;
wire \A[0]~input_o ;
wire \inst~combout ;


cycloneive_io_obuf \Ans_Xor[4]~output (
	.i(\inst6~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Ans_Xor[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \Ans_Xor[4]~output .bus_hold = "false";
defparam \Ans_Xor[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Ans_Xor[3]~output (
	.i(\inst5~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Ans_Xor[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \Ans_Xor[3]~output .bus_hold = "false";
defparam \Ans_Xor[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Ans_Xor[2]~output (
	.i(\inst4~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Ans_Xor[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Ans_Xor[2]~output .bus_hold = "false";
defparam \Ans_Xor[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Ans_Xor[1]~output (
	.i(\inst3~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Ans_Xor[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Ans_Xor[1]~output .bus_hold = "false";
defparam \Ans_Xor[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Ans_Xor[0]~output (
	.i(\inst~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Ans_Xor[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Ans_Xor[0]~output .bus_hold = "false";
defparam \Ans_Xor[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \B[4]~input (
	.i(B[4]),
	.ibar(gnd),
	.o(\B[4]~input_o ));
// synopsys translate_off
defparam \B[4]~input .bus_hold = "false";
defparam \B[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[4]~input (
	.i(A[4]),
	.ibar(gnd),
	.o(\A[4]~input_o ));
// synopsys translate_off
defparam \A[4]~input .bus_hold = "false";
defparam \A[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb inst6(
// Equation(s):
// \inst6~combout  = \B[4]~input_o  $ (\A[4]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\B[4]~input_o ),
	.datad(\A[4]~input_o ),
	.cin(gnd),
	.combout(\inst6~combout ),
	.cout());
// synopsys translate_off
defparam inst6.lut_mask = 16'h0FF0;
defparam inst6.sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \B[3]~input (
	.i(B[3]),
	.ibar(gnd),
	.o(\B[3]~input_o ));
// synopsys translate_off
defparam \B[3]~input .bus_hold = "false";
defparam \B[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[3]~input (
	.i(A[3]),
	.ibar(gnd),
	.o(\A[3]~input_o ));
// synopsys translate_off
defparam \A[3]~input .bus_hold = "false";
defparam \A[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb inst5(
// Equation(s):
// \inst5~combout  = \B[3]~input_o  $ (\A[3]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\B[3]~input_o ),
	.datad(\A[3]~input_o ),
	.cin(gnd),
	.combout(\inst5~combout ),
	.cout());
// synopsys translate_off
defparam inst5.lut_mask = 16'h0FF0;
defparam inst5.sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \B[2]~input (
	.i(B[2]),
	.ibar(gnd),
	.o(\B[2]~input_o ));
// synopsys translate_off
defparam \B[2]~input .bus_hold = "false";
defparam \B[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb inst4(
// Equation(s):
// \inst4~combout  = \B[2]~input_o  $ (\A[2]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\B[2]~input_o ),
	.datad(\A[2]~input_o ),
	.cin(gnd),
	.combout(\inst4~combout ),
	.cout());
// synopsys translate_off
defparam inst4.lut_mask = 16'h0FF0;
defparam inst4.sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb inst3(
// Equation(s):
// \inst3~combout  = \B[1]~input_o  $ (\A[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\B[1]~input_o ),
	.datad(\A[1]~input_o ),
	.cin(gnd),
	.combout(\inst3~combout ),
	.cout());
// synopsys translate_off
defparam inst3.lut_mask = 16'h0FF0;
defparam inst3.sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb inst(
// Equation(s):
// \inst~combout  = \B[0]~input_o  $ (\A[0]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\B[0]~input_o ),
	.datad(\A[0]~input_o ),
	.cin(gnd),
	.combout(\inst~combout ),
	.cout());
// synopsys translate_off
defparam inst.lut_mask = 16'h0FF0;
defparam inst.sum_lutc_input = "datac";
// synopsys translate_on

assign Ans_Xor[4] = \Ans_Xor[4]~output_o ;

assign Ans_Xor[3] = \Ans_Xor[3]~output_o ;

assign Ans_Xor[2] = \Ans_Xor[2]~output_o ;

assign Ans_Xor[1] = \Ans_Xor[1]~output_o ;

assign Ans_Xor[0] = \Ans_Xor[0]~output_o ;

endmodule
