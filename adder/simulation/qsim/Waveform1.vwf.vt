// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/28/2023 14:42:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] A;
reg [4:0] B;
reg S0;
reg S1;
reg S2;
// wires                                               
wire AHS;
wire ALS;
wire [4:0] Ans_And;
wire [4:0] Ans_Xor;
wire BHS;
wire BLS;
wire CHS;
wire CLS;
wire [4:0] comp_a_2;
wire COMPARISON;
wire DHS;
wire DLS;
wire EHS;
wire ELS;
wire FHS;
wire FLS;
wire GHS;
wire GLS;
wire sing_sum_ans;
wire [5:0] subans;
wire [5:0] sumans;

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AHS(AHS),
	.ALS(ALS),
	.Ans_And(Ans_And),
	.Ans_Xor(Ans_Xor),
	.B(B),
	.BHS(BHS),
	.BLS(BLS),
	.CHS(CHS),
	.CLS(CLS),
	.comp_a_2(comp_a_2),
	.COMPARISON(COMPARISON),
	.DHS(DHS),
	.DLS(DLS),
	.EHS(EHS),
	.ELS(ELS),
	.FHS(FHS),
	.FLS(FLS),
	.GHS(GHS),
	.GLS(GLS),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.sing_sum_ans(sing_sum_ans),
	.subans(subans),
	.sumans(sumans)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// S0
initial
begin
	S0 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 
endmodule

