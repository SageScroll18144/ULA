// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "02/02/2023 15:02:14"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module comparison_MT (
	ans,
	bitB,
	bitA);
output 	ans;
input 	[4:0] bitB;
input 	[4:0] bitA;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \ans~output_o ;
wire \bitB[4]~input_o ;
wire \bitA[4]~input_o ;
wire \bitA[3]~input_o ;
wire \bitB[3]~input_o ;
wire \bitA[2]~input_o ;
wire \bitA[1]~input_o ;
wire \bitA[0]~input_o ;
wire \bitB[0]~input_o ;
wire \bitB[1]~input_o ;
wire \inst1~0_combout ;
wire \bitB[2]~input_o ;
wire \inst1~1_combout ;
wire \inst1~2_combout ;
wire \inst1~3_combout ;


cycloneive_io_obuf \ans~output (
	.i(\inst1~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ans~output_o ),
	.obar());
// synopsys translate_off
defparam \ans~output .bus_hold = "false";
defparam \ans~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \bitB[4]~input (
	.i(bitB[4]),
	.ibar(gnd),
	.o(\bitB[4]~input_o ));
// synopsys translate_off
defparam \bitB[4]~input .bus_hold = "false";
defparam \bitB[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitA[4]~input (
	.i(bitA[4]),
	.ibar(gnd),
	.o(\bitA[4]~input_o ));
// synopsys translate_off
defparam \bitA[4]~input .bus_hold = "false";
defparam \bitA[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitA[3]~input (
	.i(bitA[3]),
	.ibar(gnd),
	.o(\bitA[3]~input_o ));
// synopsys translate_off
defparam \bitA[3]~input .bus_hold = "false";
defparam \bitA[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitB[3]~input (
	.i(bitB[3]),
	.ibar(gnd),
	.o(\bitB[3]~input_o ));
// synopsys translate_off
defparam \bitB[3]~input .bus_hold = "false";
defparam \bitB[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitA[2]~input (
	.i(bitA[2]),
	.ibar(gnd),
	.o(\bitA[2]~input_o ));
// synopsys translate_off
defparam \bitA[2]~input .bus_hold = "false";
defparam \bitA[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitA[1]~input (
	.i(bitA[1]),
	.ibar(gnd),
	.o(\bitA[1]~input_o ));
// synopsys translate_off
defparam \bitA[1]~input .bus_hold = "false";
defparam \bitA[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitA[0]~input (
	.i(bitA[0]),
	.ibar(gnd),
	.o(\bitA[0]~input_o ));
// synopsys translate_off
defparam \bitA[0]~input .bus_hold = "false";
defparam \bitA[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitB[0]~input (
	.i(bitB[0]),
	.ibar(gnd),
	.o(\bitB[0]~input_o ));
// synopsys translate_off
defparam \bitB[0]~input .bus_hold = "false";
defparam \bitB[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \bitB[1]~input (
	.i(bitB[1]),
	.ibar(gnd),
	.o(\bitB[1]~input_o ));
// synopsys translate_off
defparam \bitB[1]~input .bus_hold = "false";
defparam \bitB[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst1~0 (
// Equation(s):
// \inst1~0_combout  = (\bitA[1]~input_o  & (((\bitA[0]~input_o  & !\bitB[0]~input_o )) # (!\bitB[1]~input_o ))) # (!\bitA[1]~input_o  & (\bitA[0]~input_o  & (!\bitB[0]~input_o  & !\bitB[1]~input_o )))

	.dataa(\bitA[1]~input_o ),
	.datab(\bitA[0]~input_o ),
	.datac(\bitB[0]~input_o ),
	.datad(\bitB[1]~input_o ),
	.cin(gnd),
	.combout(\inst1~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1~0 .lut_mask = 16'h08AE;
defparam \inst1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \bitB[2]~input (
	.i(bitB[2]),
	.ibar(gnd),
	.o(\bitB[2]~input_o ));
// synopsys translate_off
defparam \bitB[2]~input .bus_hold = "false";
defparam \bitB[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst1~1 (
// Equation(s):
// \inst1~1_combout  = (\bitA[2]~input_o  & ((\inst1~0_combout ) # (!\bitB[2]~input_o ))) # (!\bitA[2]~input_o  & (\inst1~0_combout  & !\bitB[2]~input_o ))

	.dataa(\bitA[2]~input_o ),
	.datab(\inst1~0_combout ),
	.datac(\bitB[2]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst1~1 .lut_mask = 16'h8E8E;
defparam \inst1~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1~2 (
// Equation(s):
// \inst1~2_combout  = (\bitA[3]~input_o  & ((\inst1~1_combout ) # (!\bitB[3]~input_o ))) # (!\bitA[3]~input_o  & (!\bitB[3]~input_o  & \inst1~1_combout ))

	.dataa(\bitA[3]~input_o ),
	.datab(\bitB[3]~input_o ),
	.datac(\inst1~1_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst1~2 .lut_mask = 16'hB2B2;
defparam \inst1~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1~3 (
// Equation(s):
// \inst1~3_combout  = (\bitB[4]~input_o  & ((\inst1~2_combout ) # (!\bitA[4]~input_o ))) # (!\bitB[4]~input_o  & (!\bitA[4]~input_o  & \inst1~2_combout ))

	.dataa(\bitB[4]~input_o ),
	.datab(\bitA[4]~input_o ),
	.datac(\inst1~2_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1~3_combout ),
	.cout());
// synopsys translate_off
defparam \inst1~3 .lut_mask = 16'hB2B2;
defparam \inst1~3 .sum_lutc_input = "datac";
// synopsys translate_on

assign ans = \ans~output_o ;

endmodule
