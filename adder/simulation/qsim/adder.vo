// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "01/27/2023 21:08:24"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module dabble (
	Out0,
	In1,
	In0,
	In2,
	In3,
	Out1,
	Out2,
	Out3);
output 	Out0;
input 	In1;
input 	In0;
input 	In2;
input 	In3;
output 	Out1;
output 	Out2;
output 	Out3;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Out0~output_o ;
wire \Out1~output_o ;
wire \Out2~output_o ;
wire \Out3~output_o ;
wire \In2~input_o ;
wire \In3~input_o ;
wire \In0~input_o ;
wire \In1~input_o ;
wire \inst5~combout ;
wire \inst7~combout ;
wire \inst8~0_combout ;
wire \inst9~combout ;


cycloneive_io_obuf \Out0~output (
	.i(!\inst5~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Out0~output_o ),
	.obar());
// synopsys translate_off
defparam \Out0~output .bus_hold = "false";
defparam \Out0~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Out1~output (
	.i(!\inst7~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Out1~output_o ),
	.obar());
// synopsys translate_off
defparam \Out1~output .bus_hold = "false";
defparam \Out1~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Out2~output (
	.i(\inst8~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Out2~output_o ),
	.obar());
// synopsys translate_off
defparam \Out2~output .bus_hold = "false";
defparam \Out2~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Out3~output (
	.i(!\inst9~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Out3~output_o ),
	.obar());
// synopsys translate_off
defparam \Out3~output .bus_hold = "false";
defparam \Out3~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \In2~input (
	.i(In2),
	.ibar(gnd),
	.o(\In2~input_o ));
// synopsys translate_off
defparam \In2~input .bus_hold = "false";
defparam \In2~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \In3~input (
	.i(In3),
	.ibar(gnd),
	.o(\In3~input_o ));
// synopsys translate_off
defparam \In3~input .bus_hold = "false";
defparam \In3~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \In0~input (
	.i(In0),
	.ibar(gnd),
	.o(\In0~input_o ));
// synopsys translate_off
defparam \In0~input .bus_hold = "false";
defparam \In0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \In1~input (
	.i(In1),
	.ibar(gnd),
	.o(\In1~input_o ));
// synopsys translate_off
defparam \In1~input .bus_hold = "false";
defparam \In1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb inst5(
// Equation(s):
// \inst5~combout  = (\In0~input_o  & (\In2~input_o  & (\In3~input_o ))) # (!\In0~input_o  & (((!\In2~input_o  & !\In3~input_o )) # (!\In1~input_o )))

	.dataa(\In2~input_o ),
	.datab(\In3~input_o ),
	.datac(\In0~input_o ),
	.datad(\In1~input_o ),
	.cin(gnd),
	.combout(\inst5~combout ),
	.cout());
// synopsys translate_off
defparam inst5.lut_mask = 16'h818F;
defparam inst5.sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb inst7(
// Equation(s):
// \inst7~combout  = (\In2~input_o ) # ((\In0~input_o  & ((!\In3~input_o ))) # (!\In0~input_o  & ((\In3~input_o ) # (!\In1~input_o ))))

	.dataa(\In2~input_o ),
	.datab(\In1~input_o ),
	.datac(\In0~input_o ),
	.datad(\In3~input_o ),
	.cin(gnd),
	.combout(\inst7~combout ),
	.cout());
// synopsys translate_off
defparam inst7.lut_mask = 16'hAFFB;
defparam inst7.sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst8~0 (
// Equation(s):
// \inst8~0_combout  = (\In2~input_o  & (!\In0~input_o  & ((\In3~input_o ) # (!\In1~input_o )))) # (!\In2~input_o  & (((!\In3~input_o  & \In0~input_o ))))

	.dataa(\In1~input_o ),
	.datab(\In2~input_o ),
	.datac(\In3~input_o ),
	.datad(\In0~input_o ),
	.cin(gnd),
	.combout(\inst8~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst8~0 .lut_mask = 16'h03C4;
defparam \inst8~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb inst9(
// Equation(s):
// \inst9~combout  = (\In3~input_o  & ((\In0~input_o  & ((!\In2~input_o ))) # (!\In0~input_o  & (\In1~input_o )))) # (!\In3~input_o  & (!\In0~input_o  & ((!\In2~input_o ) # (!\In1~input_o ))))

	.dataa(\In3~input_o ),
	.datab(\In1~input_o ),
	.datac(\In0~input_o ),
	.datad(\In2~input_o ),
	.cin(gnd),
	.combout(\inst9~combout ),
	.cout());
// synopsys translate_off
defparam inst9.lut_mask = 16'h09AD;
defparam inst9.sum_lutc_input = "datac";
// synopsys translate_on

assign Out0 = \Out0~output_o ;

assign Out1 = \Out1~output_o ;

assign Out2 = \Out2~output_o ;

assign Out3 = \Out3~output_o ;

endmodule
