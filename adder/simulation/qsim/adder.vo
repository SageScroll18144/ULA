// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "02/05/2023 10:14:31"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module fivebitstosixbits (
	vector_sixbits,
	vector_fivebits);
output 	[5:0] vector_sixbits;
input 	[4:0] vector_fivebits;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \vector_sixbits[5]~output_o ;
wire \vector_sixbits[4]~output_o ;
wire \vector_sixbits[3]~output_o ;
wire \vector_sixbits[2]~output_o ;
wire \vector_sixbits[1]~output_o ;
wire \vector_sixbits[0]~output_o ;
wire \vector_fivebits[4]~input_o ;
wire \vector_fivebits[3]~input_o ;
wire \vector_fivebits[2]~input_o ;
wire \vector_fivebits[1]~input_o ;
wire \vector_fivebits[0]~input_o ;


cycloneive_io_obuf \vector_sixbits[5]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\vector_sixbits[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \vector_sixbits[5]~output .bus_hold = "false";
defparam \vector_sixbits[5]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \vector_sixbits[4]~output (
	.i(\vector_fivebits[4]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\vector_sixbits[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \vector_sixbits[4]~output .bus_hold = "false";
defparam \vector_sixbits[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \vector_sixbits[3]~output (
	.i(\vector_fivebits[3]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\vector_sixbits[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \vector_sixbits[3]~output .bus_hold = "false";
defparam \vector_sixbits[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \vector_sixbits[2]~output (
	.i(\vector_fivebits[2]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\vector_sixbits[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \vector_sixbits[2]~output .bus_hold = "false";
defparam \vector_sixbits[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \vector_sixbits[1]~output (
	.i(\vector_fivebits[1]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\vector_sixbits[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \vector_sixbits[1]~output .bus_hold = "false";
defparam \vector_sixbits[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \vector_sixbits[0]~output (
	.i(\vector_fivebits[0]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\vector_sixbits[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \vector_sixbits[0]~output .bus_hold = "false";
defparam \vector_sixbits[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \vector_fivebits[4]~input (
	.i(vector_fivebits[4]),
	.ibar(gnd),
	.o(\vector_fivebits[4]~input_o ));
// synopsys translate_off
defparam \vector_fivebits[4]~input .bus_hold = "false";
defparam \vector_fivebits[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \vector_fivebits[3]~input (
	.i(vector_fivebits[3]),
	.ibar(gnd),
	.o(\vector_fivebits[3]~input_o ));
// synopsys translate_off
defparam \vector_fivebits[3]~input .bus_hold = "false";
defparam \vector_fivebits[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \vector_fivebits[2]~input (
	.i(vector_fivebits[2]),
	.ibar(gnd),
	.o(\vector_fivebits[2]~input_o ));
// synopsys translate_off
defparam \vector_fivebits[2]~input .bus_hold = "false";
defparam \vector_fivebits[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \vector_fivebits[1]~input (
	.i(vector_fivebits[1]),
	.ibar(gnd),
	.o(\vector_fivebits[1]~input_o ));
// synopsys translate_off
defparam \vector_fivebits[1]~input .bus_hold = "false";
defparam \vector_fivebits[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \vector_fivebits[0]~input (
	.i(vector_fivebits[0]),
	.ibar(gnd),
	.o(\vector_fivebits[0]~input_o ));
// synopsys translate_off
defparam \vector_fivebits[0]~input .bus_hold = "false";
defparam \vector_fivebits[0]~input .simulate_z_as = "z";
// synopsys translate_on

assign vector_sixbits[5] = \vector_sixbits[5]~output_o ;

assign vector_sixbits[4] = \vector_sixbits[4]~output_o ;

assign vector_sixbits[3] = \vector_sixbits[3]~output_o ;

assign vector_sixbits[2] = \vector_sixbits[2]~output_o ;

assign vector_sixbits[1] = \vector_sixbits[1]~output_o ;

assign vector_sixbits[0] = \vector_sixbits[0]~output_o ;

endmodule
